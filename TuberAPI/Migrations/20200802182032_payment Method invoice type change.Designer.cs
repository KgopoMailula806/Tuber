// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TuberAPI.Data;

namespace TuberAPI.Migrations
{
    [DbContext(typeof(TuberDbContext))]
    [Migration("20200802182032_payment Method invoice type change")]
    partial class paymentMethodinvoicetypechange
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TuberAPI.Data.ClientBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookingDetails_BookingRequestTable_Reference")
                        .HasColumnType("int");

                    b.Property<int>("Client_Table_Reference")
                        .HasColumnType("int");

                    b.Property<string>("Date_Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Periods")
                        .HasColumnType("int");

                    b.Property<int>("Tutor_Table_Reference")
                        .HasColumnType("int");

                    b.Property<int>("isActive")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ClientBookings");
                });

            modelBuilder.Entity("TuberAPI.models.BookingRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientProposedLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Client_Reference")
                        .HasColumnType("int");

                    b.Property<string>("EndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsRespondedTo")
                        .HasColumnType("int");

                    b.Property<int>("Is_Accepted")
                        .HasColumnType("int");

                    b.Property<int>("Periods")
                        .HasColumnType("int");

                    b.Property<string>("RequestDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tutor_Reference")
                        .HasColumnType("int");

                    b.Property<string>("tutorProposedLocation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BookingRequests");
                });

            modelBuilder.Entity("TuberAPI.models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Current_Grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Institution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User_Table_Reference")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Current_Grade = "First year",
                            Institution = "University of Johannesburg",
                            User_Table_Reference = 15
                        },
                        new
                        {
                            Id = 2,
                            Current_Grade = "12",
                            Institution = "John Ore High",
                            User_Table_Reference = 16
                        },
                        new
                        {
                            Id = 3,
                            Current_Grade = "Second year",
                            Institution = "Wits",
                            User_Table_Reference = 17
                        },
                        new
                        {
                            Id = 4,
                            Current_Grade = "third year",
                            Institution = "UP",
                            User_Table_Reference = 18
                        },
                        new
                        {
                            Id = 5,
                            Current_Grade = "8",
                            Institution = "Sedibeng high",
                            User_Table_Reference = 19
                        });
                });

            modelBuilder.Entity("TuberAPI.models.Client_Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DateAssigned")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Is_Active")
                        .HasColumnType("int");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("clientRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("clientRef");

                    b.ToTable("Client_Modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAssigned = "2020/01/02",
                            Is_Active = 1,
                            ModuleId = 1,
                            clientRef = 1
                        },
                        new
                        {
                            Id = 2,
                            DateAssigned = "2020/01/02",
                            Is_Active = 1,
                            ModuleId = 1,
                            clientRef = 2
                        },
                        new
                        {
                            Id = 3,
                            DateAssigned = "2020/01/02",
                            Is_Active = 1,
                            ModuleId = 2,
                            clientRef = 3
                        },
                        new
                        {
                            Id = 4,
                            DateAssigned = "2020/01/06",
                            Is_Active = 1,
                            ModuleId = 5,
                            clientRef = 2
                        },
                        new
                        {
                            Id = 5,
                            DateAssigned = "2020/01/07",
                            Is_Active = 1,
                            ModuleId = 10,
                            clientRef = 4
                        },
                        new
                        {
                            Id = 6,
                            DateAssigned = "2020/02/02",
                            Is_Active = 1,
                            ModuleId = 9,
                            clientRef = 5
                        });
                });

            modelBuilder.Entity("TuberAPI.models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocumentData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("TuberAPI.models.Event", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("TuberAPI.models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("Client_ID")
                        .HasColumnType("int");

                    b.Property<string>("Date_Issued")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Payment_Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Session_ID")
                        .HasColumnType("int");

                    b.Property<int>("is_Paid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("TuberAPI.models.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CVID")
                        .HasColumnType("int");

                    b.Property<int>("User_Table_Reference")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CVID = 0,
                            User_Table_Reference = 7
                        },
                        new
                        {
                            Id = 2,
                            CVID = 0,
                            User_Table_Reference = 8
                        },
                        new
                        {
                            Id = 3,
                            CVID = 0,
                            User_Table_Reference = 9
                        },
                        new
                        {
                            Id = 4,
                            CVID = 0,
                            User_Table_Reference = 10
                        });
                });

            modelBuilder.Entity("TuberAPI.models.ManagersLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Action_Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Date_time_Of_Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Manager_Reference")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ManagersLogs");
                });

            modelBuilder.Entity("TuberAPI.models.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Attended")
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Minutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TutorID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Venue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("TuberAPI.models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Module_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Module_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Module_Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Module_Code = "HS",
                            Module_Name = "History"
                        },
                        new
                        {
                            Id = 2,
                            Module_Code = "GT",
                            Module_Name = "Graph Theory"
                        },
                        new
                        {
                            Id = 3,
                            Module_Code = "LA",
                            Module_Name = "Linear Algebra"
                        },
                        new
                        {
                            Id = 4,
                            Module_Code = "Apm",
                            Module_Name = "Applied math"
                        },
                        new
                        {
                            Id = 5,
                            Module_Code = "Ns",
                            Module_Name = "Natural science"
                        },
                        new
                        {
                            Id = 6,
                            Module_Code = "Lo",
                            Module_Name = "Life orientation"
                        },
                        new
                        {
                            Id = 7,
                            Module_Code = "SS",
                            Module_Name = "Social Science"
                        },
                        new
                        {
                            Id = 8,
                            Module_Code = "Phys",
                            Module_Name = "Physical Science"
                        },
                        new
                        {
                            Id = 9,
                            Module_Code = "Ls",
                            Module_Name = "Life Science"
                        },
                        new
                        {
                            Id = 10,
                            Module_Code = "Agri",
                            Module_Name = "Agriculture"
                        });
                });

            modelBuilder.Entity("TuberAPI.models.Notification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DatePosted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Event_Table_Reference")
                        .HasColumnType("int");

                    b.Property<string>("PersonTheNotificationConcerns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Seen")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User_Table_Reference")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("TuberAPI.models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Client_ID")
                        .HasColumnType("int");

                    b.Property<int>("Client_Rating")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Session_Reference")
                        .HasColumnType("int");

                    b.Property<int>("Tutor_ID")
                        .HasColumnType("int");

                    b.Property<int>("Tutor_Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("TuberAPI.models.Reason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Reasons");
                });

            modelBuilder.Entity("TuberAPI.models.Tutor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Is_Accepted")
                        .HasColumnType("int");

                    b.Property<int>("User_Table_Reference")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tutors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Is_Accepted = 0,
                            User_Table_Reference = 1
                        },
                        new
                        {
                            Id = 2,
                            Is_Accepted = 1,
                            User_Table_Reference = 2
                        },
                        new
                        {
                            Id = 3,
                            Is_Accepted = 0,
                            User_Table_Reference = 3
                        },
                        new
                        {
                            Id = 4,
                            Is_Accepted = 1,
                            User_Table_Reference = 4
                        },
                        new
                        {
                            Id = 5,
                            Is_Accepted = 0,
                            User_Table_Reference = 5
                        },
                        new
                        {
                            Id = 6,
                            Is_Accepted = 0,
                            User_Table_Reference = 6
                        },
                        new
                        {
                            Id = 7,
                            Is_Accepted = 0,
                            User_Table_Reference = 11
                        },
                        new
                        {
                            Id = 8,
                            Is_Accepted = 0,
                            User_Table_Reference = 12
                        },
                        new
                        {
                            Id = 9,
                            Is_Accepted = 0,
                            User_Table_Reference = 13
                        },
                        new
                        {
                            Id = 10,
                            Is_Accepted = 0,
                            User_Table_Reference = 14
                        });
                });

            modelBuilder.Entity("TuberAPI.models.TutorBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Client_Reference")
                        .HasColumnType("int");

                    b.Property<string>("Date_Time_For_The_Booking")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Is_Active")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tutor_Table_Reference")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TutorBookings");
                });

            modelBuilder.Entity("TuberAPI.models.TutorDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DocID")
                        .HasColumnType("int");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TutorID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TutorDocuments");
                });

            modelBuilder.Entity("TuberAPI.models.Tutor_Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Date_Assigned")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Is_Active")
                        .HasColumnType("int");

                    b.Property<int>("Module_Reference")
                        .HasColumnType("int");

                    b.Property<int>("Tutor_Reference")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Module_Reference");

                    b.HasIndex("Tutor_Reference");

                    b.ToTable("Tutor_Modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date_Assigned = "20/01/2020",
                            Is_Active = 1,
                            Module_Reference = 1,
                            Tutor_Reference = 1
                        },
                        new
                        {
                            Id = 2,
                            Date_Assigned = "20/01/2020",
                            Is_Active = 1,
                            Module_Reference = 2,
                            Tutor_Reference = 1
                        },
                        new
                        {
                            Id = 3,
                            Date_Assigned = "20/02/2020",
                            Is_Active = 1,
                            Module_Reference = 2,
                            Tutor_Reference = 2
                        },
                        new
                        {
                            Id = 4,
                            Date_Assigned = "21/02/2020",
                            Is_Active = 1,
                            Module_Reference = 1,
                            Tutor_Reference = 2
                        },
                        new
                        {
                            Id = 5,
                            Date_Assigned = "20/01/2020",
                            Is_Active = 1,
                            Module_Reference = 5,
                            Tutor_Reference = 6
                        },
                        new
                        {
                            Id = 6,
                            Date_Assigned = "25/02/2020",
                            Is_Active = 1,
                            Module_Reference = 10,
                            Tutor_Reference = 7
                        },
                        new
                        {
                            Id = 7,
                            Date_Assigned = "22/03/2020",
                            Is_Active = 1,
                            Module_Reference = 9,
                            Tutor_Reference = 4
                        },
                        new
                        {
                            Id = 8,
                            Date_Assigned = "10/01/2020",
                            Is_Active = 1,
                            Module_Reference = 8,
                            Tutor_Reference = 4
                        },
                        new
                        {
                            Id = 9,
                            Date_Assigned = "20/01/2020",
                            Is_Active = 1,
                            Module_Reference = 1,
                            Tutor_Reference = 5
                        },
                        new
                        {
                            Id = 10,
                            Date_Assigned = "20/01/2020",
                            Is_Active = 1,
                            Module_Reference = 6,
                            Tutor_Reference = 3
                        });
                });

            modelBuilder.Entity("TuberAPI.models.Tutorial_Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Client_Reference")
                        .HasColumnType("int");

                    b.Property<string>("Clients_Paths")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clients_Session_FeedBack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Clients_tutor_Rating")
                        .HasColumnType("int");

                    b.Property<string>("Geographic_Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsCompleted")
                        .HasColumnType("int");

                    b.Property<string>("Session_Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Session_End_Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Session_Start_Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tutor_Id")
                        .HasColumnType("int");

                    b.Property<int>("Tutors_Client_Rating")
                        .HasColumnType("int");

                    b.Property<string>("Tutors_Paths")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tutors_Session_FeedBack")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tutorial_Sessions");
                });

            modelBuilder.Entity("TuberAPI.models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email_Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNames")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Image")
                        .HasColumnType("int");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("User_Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Valid_Phone_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("isActive")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 22,
                            Email_Address = "malala@gmail.com",
                            FullNames = "Mustard Malala",
                            Gender = "Male",
                            Image = 0,
                            PassWord = "testData123",
                            Surname = "Petroes",
                            User_Discriminator = "Tutor",
                            Valid_Phone_Number = "0817896358",
                            isActive = 1
                        },
                        new
                        {
                            Id = 2,
                            Age = 24,
                            Email_Address = "kinja@gmail.com",
                            FullNames = "Moloya ma",
                            Gender = "Female",
                            Image = 0,
                            PassWord = "testData123",
                            Surname = "kinja",
                            User_Discriminator = "Tutor",
                            Valid_Phone_Number = "0718896358",
                            isActive = 1
                        },
                        new
                        {
                            Id = 3,
                            Age = 20,
                            Email_Address = "Marawa@gmail.com",
                            FullNames = "Jelous",
                            Gender = "Male",
                            Image = 0,
                            PassWord = "testData123",
                            Surname = "Marawa",
                            User_Discriminator = "Tutor",
                            Valid_Phone_Number = "0715589632",
                            isActive = 1
                        },
                        new
                        {
                            Id = 4,
                            Age = 19,
                            Email_Address = "Plove@gmail.com",
                            FullNames = "Kombibi",
                            Gender = "Female",
                            Image = 0,
                            PassWord = "testData123",
                            Surname = "Plove",
                            User_Discriminator = "Tutor",
                            Valid_Phone_Number = "0817896358",
                            isActive = 1
                        },
                        new
                        {
                            Id = 5,
                            Age = 25,
                            Email_Address = "Bolopi@gmail.com",
                            FullNames = "Skumba",
                            Gender = "Female",
                            Image = 0,
                            PassWord = "testData123",
                            Surname = "Bolopi",
                            User_Discriminator = "Tutor",
                            Valid_Phone_Number = "0615547889",
                            isActive = 1
                        },
                        new
                        {
                            Id = 6,
                            Age = 35,
                            Email_Address = "Mlambo@gmail.com",
                            FullNames = "Rhulani",
                            Gender = "Male",
                            Image = 0,
                            PassWord = "testData123",
                            Surname = "Mlambo",
                            User_Discriminator = "Tutor",
                            Valid_Phone_Number = "0815798645",
                            isActive = 1
                        },
                        new
                        {
                            Id = 7,
                            Age = 19,
                            Email_Address = "Burgers@gmail.com",
                            FullNames = "Keane Allessandro",
                            Gender = "Male",
                            Image = 0,
                            PassWord = "DataView123",
                            Surname = "Burgers",
                            User_Discriminator = "Manager",
                            Valid_Phone_Number = "0115550125",
                            isActive = 1
                        },
                        new
                        {
                            Id = 8,
                            Age = 20,
                            Email_Address = "Petroes@gmail.com",
                            FullNames = "Kgopo",
                            Gender = "Male",
                            Image = 0,
                            PassWord = "testData123",
                            Surname = "Petroes",
                            User_Discriminator = "Manager",
                            Valid_Phone_Number = "0815569870",
                            isActive = 1
                        },
                        new
                        {
                            Id = 9,
                            Age = 22,
                            Email_Address = "Mngomezulu@gmail.com",
                            FullNames = "Jacob",
                            Gender = "Male",
                            Image = 0,
                            PassWord = "testData123",
                            Surname = "Mngomezulu",
                            User_Discriminator = "Manager",
                            Valid_Phone_Number = "0418996358",
                            isActive = 1
                        },
                        new
                        {
                            Id = 10,
                            Age = 30,
                            Email_Address = "Maximus@gmail.com",
                            FullNames = "Max",
                            Gender = "Male",
                            Image = 0,
                            PassWord = "testData123",
                            Surname = "Maximus",
                            User_Discriminator = "Manager",
                            Valid_Phone_Number = "0817896358",
                            isActive = 1
                        },
                        new
                        {
                            Id = 11,
                            Age = 22,
                            Email_Address = "Maximus@gmail.com",
                            FullNames = "Max",
                            Gender = "Female",
                            Image = 0,
                            PassWord = "testData123",
                            Surname = "Ndlovu",
                            User_Discriminator = "Tutor",
                            Valid_Phone_Number = "0112368795",
                            isActive = 0
                        },
                        new
                        {
                            Id = 12,
                            Age = 45,
                            Email_Address = "Madumane@gmail.com",
                            FullNames = "Madumane",
                            Gender = "Male",
                            Image = 0,
                            PassWord = "testData123",
                            Surname = "Mphori",
                            User_Discriminator = "Tutor",
                            Valid_Phone_Number = "0817896358",
                            isActive = 1
                        },
                        new
                        {
                            Id = 13,
                            Age = 19,
                            Email_Address = "Mjekeke@gmail.com",
                            FullNames = "Lover",
                            Gender = "Female",
                            Image = 0,
                            PassWord = "testData123",
                            Surname = "Mjekeke",
                            User_Discriminator = "Tutor",
                            Valid_Phone_Number = "0816589632",
                            isActive = 1
                        },
                        new
                        {
                            Id = 14,
                            Age = 19,
                            Email_Address = "Test@gmail.com",
                            FullNames = "UserNo14",
                            Gender = "Male",
                            Image = 0,
                            PassWord = "testData123",
                            Surname = "Test",
                            User_Discriminator = "Tutor",
                            Valid_Phone_Number = "0147895236",
                            isActive = 1
                        },
                        new
                        {
                            Id = 15,
                            Age = 15,
                            Email_Address = "Springer@gmail.com",
                            FullNames = "Jery",
                            Gender = "Male",
                            Image = 0,
                            PassWord = "testData123",
                            Surname = "Springer",
                            User_Discriminator = "Client",
                            Valid_Phone_Number = "0644456699",
                            isActive = 1
                        },
                        new
                        {
                            Id = 16,
                            Age = 14,
                            Email_Address = "UyangTesta@gmail.com",
                            FullNames = "UserNo16",
                            Gender = "Female",
                            Image = 0,
                            PassWord = "testData123",
                            Surname = "UyangTesta",
                            User_Discriminator = "Client",
                            Valid_Phone_Number = "0147895236",
                            isActive = 1
                        },
                        new
                        {
                            Id = 17,
                            Age = 19,
                            Email_Address = "Graphoed@gmail.com",
                            FullNames = "Polly",
                            Gender = "Female",
                            Image = 0,
                            PassWord = "testData123",
                            Surname = "Graphoed",
                            User_Discriminator = "Client",
                            Valid_Phone_Number = "0817896354",
                            isActive = 1
                        },
                        new
                        {
                            Id = 18,
                            Age = 19,
                            Email_Address = "Dreams@gmail.com",
                            FullNames = "Vuyo",
                            Gender = "Male",
                            Image = 0,
                            PassWord = "testData123",
                            Surname = "Big Dreamer",
                            User_Discriminator = "Client",
                            Valid_Phone_Number = "0147895236",
                            isActive = 1
                        },
                        new
                        {
                            Id = 19,
                            Age = 19,
                            Email_Address = "test19@gmail.com",
                            FullNames = "LastNumber",
                            Gender = "Male",
                            Image = 0,
                            PassWord = "testData123",
                            Surname = "test19",
                            User_Discriminator = "Client",
                            Valid_Phone_Number = "0816527412",
                            isActive = 1
                        });
                });

            modelBuilder.Entity("TuberAPI.models.Client_Module", b =>
                {
                    b.HasOne("TuberAPI.models.Module", "Module_Reference")
                        .WithMany("Client_Modules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TuberAPI.models.Client", "Client_Reference")
                        .WithMany("Client_Modules")
                        .HasForeignKey("clientRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TuberAPI.models.Tutor_Module", b =>
                {
                    b.HasOne("TuberAPI.models.Module", "Module")
                        .WithMany("Tutor_Modules")
                        .HasForeignKey("Module_Reference")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TuberAPI.models.Tutor", "Tutor")
                        .WithMany("Tutor_Modules")
                        .HasForeignKey("Tutor_Reference")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
